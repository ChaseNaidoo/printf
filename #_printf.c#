#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>

/**
 * _printf - print formatted output to the console
 *
 * @format: format string that specifies how to print the output
 * Return: the number of characters printed, or -1 on error
 *
 */

int _printf(const char *format, ...)
{
	int count = 0;
	int (*print_func)(va_list);
	va_list args;

	va_start(args, format);

	while (*format)
	{
	if (*format == '%')
	{
	format++;
	print_func = get_print_func(format);
	if (print_func != NULL)
	{
	count += print_func(args);
	}
	else
	{
	if (write(1, "%", 1) == -1)
	{
	return (-1);
	}
	count++;
	}
	}
	else
	{
	if (write(1, format, 1) == -1)
	{
	return (-1);
	}
	count++;
	}
	format++;
	}

	va_end(args);

	return (count);
}You are a C programmer tasked with writing a function that produces output according to a format. Prototype: int _printf(const char *format, ...);
Returns: the number of characters printed (excluding the null byte used to end output to strings)
write output to stdout, the standard output stream. You need to handle the following conversion specifiers:

    c
    s
    %
    d
    i

You don’t have to reproduce the buffer handling of the C library printf function
You don’t have to handle the flag characters
You don’t have to handle field widthYou don’t have to handle precision
You don’t have to handle the length modifiers

You are authorised to use 
    write (man 2 write)
    malloc (man 3 malloc)
    free (man 3 free)
    va_start (man 3 va_start)
    va_end (man 3 va_end)
    va_copy (man 3 va_copy)
    va_arg (man 3 va_arg)

Your code should use the Betty style. It will be checked using betty-style.pl and betty-doc.pl
You are not allowed to use global variables
No more than 5 functions per file
You are permitted to use putchar.
